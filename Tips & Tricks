1. How to sort an array or vector in decreasing order

bool cmp(int a,int b)
{
	return a>b;
 }
 main()
 {
  sort(a,a+n,cmp);                //for array
  sort(a.begin(),a.end(),cmp);    //for vector
  }
  
  2. Sort more than one data through operator overloading
  
struct node
{
    int id,w;
    node(){}
    node(int a,int b)
    {
        id=a;
        w=b;
    }
    bool operator < ( const node p ) const{
        if( w == p.w ) return id < p.id ;
        return w > p.w ;
    }
};
  
3. Sort more than one data through method overloading
  
struct Data
{
    int val,pos;
};
bool cmp (Data A,Data B)
{
      if(A.val != B.val)
        return A.val<B.val;           //Here we have to use greater than(>) if we want to sort in decreasing order
      else if(A.pos != B.pos)
        return A.pos<B.pos;           //Here we have to use greater than(>) if we want to sort in decreasing order
      return 0;
}

**See the structure of fractional knapsack & think a little bit about it!
struct Data
{
    int id;
    double weight,profit;
    bool operator<(Data A)
    {
        if((profit/weight) > (A.profit/A.weight))
        {
            return true;
        }
        return false;
    }
}

4.If we have to add an int x in an array from index i to index j,and we have to do the cumulative sum of the array. Then there is a way
except O(n) complexity. See.....

ara[i] += x;
ara[j+1] += -x;
for(i=1;i<=n;i++)
  ara[i] += ara[i-1];
  
5. If we have to count the quantity of integer with any value -10^18<= x <=10^18. Then, map is the best way to solve this task. See...

map<int,int>m;
main()
{
    int ara[n];
    for(i=0;i<n;i++)
    {
        scin(ara[i]);
        m[ara[i]]++;
    }
 }
 
 6. How to seperate int from a given string
 
 string s1;
 getline(cin,s1);
 stringstream ss;
 int x;
 ss<<s1;
 while(ss>>x)
 {
    cout<<x<<endl;        ///seperated int
 }
 
 7. Try to less number of function arguments as much as possible.
 
 8. Try to use long long int to avoid overflow.
 
 9. convert an integer n to 32 bit binary number x:
      bitset<32>x(n);
10. count number of one in binary representation:
      int cnt=x.count();
11. Fermerts little theorem:
    (a/b)%m = ( (a%m)* BigMod(b,m-2,m) ) %m   ; when m is a prime number.
    That means b^-1 % m = b^m-2 % m;
12. How to convert a double to an integer value without precission loss?
    Using round function is the best.
13. How to merge 2 set or vector?
    set<int>a,b,m;
    merge(a.begin(),a.end(),b.begin(),b.end(),inserter(m,m.end()));
                  or,
    int main() {
	set<int> a {1, 3, 7, 10, 13, 20};
	set<int> b {2, 3, 5, 7, 11, 13, 15, 19};
	
	vector<int> v;
	merge(a.begin(), a.end(), b.begin(), b.end(), back_inserter(v));
	
	set<int> m(v.begin(), v.end());
	
	for(const auto &element : m) {
		cout << element << " ";
	}
	cout << endl;
	
	return 0;
}
N.B: Next one is more efficient.

14. Check the size of vector every time whenever u want to you access your vector's element. Otherwise, it can be show u RTE.

15. How to sort the vector of pair?
vector<pair<ll,ll> >v;
bool cmp(const pair<ll,ll>&i, const pair<ll,ll>&j)
{
    if(i.first != j.first)
        return i.first>j.first;
    else
        return i.second < j.second;
}
sort(v.begin(),v.end(),cmp);

16. Summation of all co-prime of a number:
	(phi(n)/2)*n
	
17. Call by reference is much faster than call by value.

18. Missing type casting for size function result in RTE.

19. In DP, dp[2][12] is more efficient than dp[12][2].

20. In DP, calculating from bigger to smaller state is more efficient.(In that case we haven't memset dp array in every case.)
